// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}     

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String           @id @default(uuid())
  fullName                  String
  email                     String           @unique
  role                      Role             @default(PATIENT)
  phone                     String?          @db.VarChar(11)
  gender                    Gender?
  birthDate                 DateTime?
  address                   String?
  password                  String
  doctor                    Doctor?
  otp                       String?          @unique
  otpExpires                String?
  refreshToken              String?          @unique
  sentMessages              Message[]        @relation("SentMessages")     
  receivedMessages          Message[]        @relation("ReceivedMessages")
  patientAppointments       Appointment[]    @relation("patientAppointments")
  doctorAppointments        Appointment[]    @relation("doctorAppointments")
  patientReviews            Review[]         @relation("patientReviews")
  doctorReviews             Review[]         @relation("doctorReviews")
  notifications             Notifications[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Doctor {
  userId         String         @id
  user           User           @relation(fields: [userId], references: [id])
  specialization String
  education      String
  experience     Int
  aboutMe        String
  fees           Int
  revenue        Int            @default(0)
  availableTimes String[]
  isActive       Boolean        @default(false)

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Appointment {
  id              String     @id @default(uuid())
  patient         User       @relation("patientAppointments", fields: [patientId], references: [id])
  patientId       String
  doctor          User       @relation("doctorAppointments", fields: [doctorId], references: [id])
  doctorId        String
  date            DateTime
  status          Status     @default(PENDING)
  isPaid          Boolean    @default(false)
  paymentMethod   Method?  
  isCompleted     Boolean    @default(false)
}

enum Status{
  PENDING
  COMPLETED
  CANCELLED
}

enum Method{
  CASH
  ONLINE
}

model Review{
  id              String     @id @default(uuid())
  patient         User       @relation("patientReviews", fields: [patientId], references: [id])
  patientId       String
  doctor          User       @relation("doctorReviews", fields: [doctorId], references: [id])
  doctorId        String
  comment         String?
  rating          Int        
  createdAt       DateTime   @default(now())
}

model Message {
  id          String   @id @default(uuid())
  content     String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Notifications {
  id          String   @id @default(uuid())
  content     String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}



